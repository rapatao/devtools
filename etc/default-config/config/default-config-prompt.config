#!/bin/bash

#----------------------------------------------------------------------------------------------------------
# PROMPT
#----------------------------------------------------------------------------------------------------------
# If this is an xterm set the title to user@host:dir
bold='';
reset="\e[0m";
black="\e[30m";
blue="\e[34m";
bluel="\e[1;34m";
cyan="\e[36m";
green="\e[32m";
orange="\e[33m";
purple="\e[35m";
red="\e[31m";
violet="\e[35m";
white="\e[37m";
yellow="\e[33m";

function prompt_git() {
	local s='';
	local branchName='';

	# If current directory is start with // (means it is network directory), do not check vcs
	if [[ $GIT_SHOW -ne 1 ]] || [[ $(pwd) == //* ]]; then
		return;
	fi;

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;
		fi;

		# Get the short symbolic ref.
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
		git rev-parse --short HEAD 2> /dev/null || \
		echo '(unknown)')";

		[ -n "${s}" ] && s=" [${s}]";
		#test
		echo -e "${1}${red}git:${violet}${branchName}${cyan}${s}";
	else
		return;
	fi;
}

function prompt_svn() {

	# If current directory is start with // (means it is network directory), do not check vcs
	if [[ $SVN_SHOW -ne 1 ]] || [ $(pwd) == //* ]; then
		return;
	fi;

	if [ "$( svn info 2>/dev/null | egrep '^URL: ' 2> /dev/null)" != '' ]; then
		# get last changed revision
		local svn_rev=$(svn info | sed -n -e '/^Last Changed Rev: \([0-9]*\).*$/s//\1/p')
		local svn_flags="[$(svn status | grep '^\s*[?ACDMR?!]' | cut -d " " -f 1 | sort | awk -F, '!array[$1]++' | sed ':a;N;$!ba;s/\n//g')]";

		# Set the final branch string.
		echo -e "${1}${red}svn${cyan}[${svn_rev}]${violet}${svn_flags}";
	else
		return;
	fi
}

#----------------------------------------------------------------------------------------------------------
# BUILDING PROMPT
#----------------------------------------------------------------------------------------------------------
# Highlight the user name when logged in as root.
function set_bash_prompt() {
	SVNP_HUGE_REPO_EXCLUDE_PATH="nufw-svn$|/tags$|/branches$"
	if [[ "${USER}" == "root" ]]; then
		userStyle="${red}";
	else
		userStyle="${orange}";
	fi;

	# Highlight the hostname when connected via SSH.
	if [[ "${SSH_TTY}" ]]; then
		hostStyle="${bold}${red}";
	else
		hostStyle="${yellow}";
	fi;

	# Set the terminal title to the current working directory.
	PS1="\[\007\]";
	PS1+="\[${bold}\]\n"; # newline
	PS1+="\[${cyan}\][\$(if [[ \$? == 0 ]]; then echo \"\[${green}\]\342\234\223\"; else echo \"\[${red}\]\342\234\227\"; fi)\[${cyan}\]] "
	PS1+="\[${userStyle}\]\u"; # username
	PS1+="\[${white}\]@";
	PS1+="\[${hostStyle}\]\h"; # host

	PS1+="\[${white}\] in ";
	PS1+="\[${green}\]\w"; # working directory
	PS1+="\$(prompt_git \"${white} on \")"; # Git repository details
	PS1+="\$(prompt_svn \"${white} on \")"; # Svn repository details

	PS1+="\n";
	PS1+="\[${white}\]\$ \[${reset}\]"; # `$` (and reset color)

	export PS1;

	PS2="\[${yellow}\]→ \[${reset}\]";
	export PS2;


}

set_bash_prompt
